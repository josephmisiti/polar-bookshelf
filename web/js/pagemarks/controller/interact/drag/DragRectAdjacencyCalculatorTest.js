"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Rects_1 = require("../../../../Rects");
const chai_1 = require("chai");
const DragRectAdjacencyCalculator_1 = require("./DragRectAdjacencyCalculator");
const Assertions_1 = require("../../../../test/Assertions");
const RectArt_1 = require("../../../../util/RectArt");
describe('DragRectAdjacencyCalculator', function () {
    describe("templated tests", function () {
        test("DRAG_LEFT_TOWARD_RESTRICTION", {
            "primaryRect": {
                "left": 50,
                "top": 0,
                "right": 350,
                "bottom": 500,
                "width": 300,
                "height": 500
            },
            "secondaryRect": {
                "left": 0,
                "top": 0,
                "right": 200,
                "bottom": 500,
                "width": 200,
                "height": 500
            },
            "adjustments": {
                "horizontal": {
                    "overlapped": true,
                    "start": 200,
                    "previous": 50,
                    "snapped": "AFTER",
                    "delta": 150,
                    "axis": "x"
                },
                "vertical": {
                    "overlapped": false,
                    "start": 0,
                    "snapped": null,
                    "axis": "y"
                }
            },
            "adjustment": {
                "overlapped": true,
                "start": 200,
                "previous": 50,
                "snapped": "AFTER",
                "delta": 150,
                "axis": "x"
            },
            "adjustedRect": {
                "left": 200,
                "top": 0,
                "right": 500,
                "bottom": 500,
                "width": 300,
                "height": 500
            }
        });
        function test(name, expected) {
            it(name, () => {
                const mockData = MockRects[name];
                let { primaryRect, intersectedRect, restrictionRect } = mockData;
                primaryRect = Rects_1.Rects.createFromBasicRect(primaryRect);
                intersectedRect = Rects_1.Rects.createFromBasicRect(intersectedRect);
                restrictionRect = Rects_1.Rects.createFromBasicRect(restrictionRect);
                const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, intersectedRect, restrictionRect);
                chai_1.assert.notEqual(adjacency.adjustment, null);
                Assertions_1.assertJSON(adjacency, expected);
            });
        }
    });
    it("Primary coming from the left, horizontal, snapping before due to restriction rect in place.", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 1, top: 0, width: 10, height: 10 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 10, top: 0, width: 10, height: 10 });
        const restrictionRect = Rects_1.Rects.createFromBasicRect({ left: 0, top: 0, width: 50, height: 50 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect, restrictionRect);
        chai_1.assert.notEqual(adjacency.adjustment, null);
        chai_1.assert.equal(adjacency.adjustment.overlapped, true);
        chai_1.assert.equal(adjacency.adjustment.snapped, "BEFORE");
        const expected = {
            "left": 0,
            "top": 0,
            "right": 10,
            "bottom": 10,
            "width": 10,
            "height": 10
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
    it("Primary coming from the left, horizontal, snapping before due to restriction rect in place.", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 1, top: 0, width: 10, height: 10 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 10, top: 0, width: 10, height: 10 });
        const restrictionRect = Rects_1.Rects.createFromBasicRect({ left: 0, top: 0, width: 50, height: 50 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect, restrictionRect);
        chai_1.assert.notEqual(adjacency.adjustment, null);
        chai_1.assert.equal(adjacency.adjustment.overlapped, true);
        chai_1.assert.equal(adjacency.adjustment.snapped, "BEFORE");
        const expected = {
            "left": 0,
            "top": 0,
            "right": 10,
            "bottom": 10,
            "width": 10,
            "height": 10
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
    it("Primary coming from the right, horizontal, snapping after due to restriction rect in place.", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 2, top: 0, width: 10, height: 10 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 1, top: 0, width: 10, height: 10 });
        const restrictionRect = Rects_1.Rects.createFromBasicRect({ left: 0, top: 0, width: 50, height: 50 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect, restrictionRect);
        chai_1.assert.notEqual(adjacency.adjustment, null);
        chai_1.assert.equal(adjacency.adjustment.overlapped, true);
        chai_1.assert.equal(adjacency.adjustment.snapped, "AFTER");
        const expected = {
            "left": 11,
            "top": 0,
            "right": 21,
            "bottom": 10,
            "width": 10,
            "height": 10
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
    it("Primary coming from the right, horizontal (snapping after)", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 16, top: 10, width: 10, height: 10 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 10, top: 10, width: 10, height: 10 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect);
        console.log("AFTER: " + RectArt_1.RectArt.formatRects([secondaryRect, adjacency.adjustedRect]).toString());
        chai_1.assert.equal(adjacency.adjustments.horizontal.overlapped, true);
        chai_1.assert.equal(adjacency.adjustments.horizontal.snapped, "AFTER");
        const expected = {
            "left": 20,
            "top": 10,
            "right": 30,
            "bottom": 20,
            "width": 10,
            "height": 10
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
    it("Primary coming from the left, horizontal (snapping before)", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 14, top: 4, width: 10, height: 10, right: 24 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 18, top: 4, width: 10, height: 10, right: 28 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect);
        console.log("AFTER: " + RectArt_1.RectArt.formatRects([secondaryRect, adjacency.adjustedRect]).toString());
        chai_1.assert.equal(adjacency.adjustments.horizontal.overlapped, true);
        chai_1.assert.equal(adjacency.adjustments.horizontal.snapped, "BEFORE");
        const expected = {
            "left": 8,
            "top": 4,
            "right": 18,
            "bottom": 14,
            "width": 10,
            "height": 10
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
    xit("No horizontal overlap", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 14, top: 4, width: 10, height: 10, right: 24 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 30, top: 4, width: 10, height: 10, right: 28 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect);
        console.log("AFTER: " + RectArt_1.RectArt.formatRects([secondaryRect, adjacency.adjustedRect]).toString());
        chai_1.assert.equal(adjacency.adjustments.horizontal.overlapped, false);
        chai_1.assert.equal(adjacency.adjustments.horizontal.snapped, null);
        Assertions_1.assertJSON(adjacency.adjustedRect, primaryRect);
    });
    it("Primary coming from the bottom, vertical (snapping after)", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({ left: 10, top: 16, width: 10, height: 10 });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({ left: 10, top: 10, width: 10, height: 10 });
        console.log("BEFORE: " + RectArt_1.RectArt.formatRects([secondaryRect, primaryRect]).toString());
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect);
        console.log("AFTER: " + RectArt_1.RectArt.formatRects([secondaryRect, adjacency.adjustedRect]).toString());
        chai_1.assert.equal(adjacency.adjustment.overlapped, true);
        chai_1.assert.equal(adjacency.adjustment.snapped, "AFTER");
        const expected = {
            "left": 10,
            "top": 20,
            "right": 20,
            "bottom": 30,
            "width": 10,
            "height": 10
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
    it("Large box coming from left", function () {
        const primaryRect = Rects_1.Rects.createFromBasicRect({
            "left": 219,
            "top": 128,
            "right": 419,
            "bottom": 328,
            "width": 200,
            "height": 200
        });
        const secondaryRect = Rects_1.Rects.createFromBasicRect({
            "left": 400,
            "top": 150,
            "right": 500,
            "bottom": 250,
            "width": 100,
            "height": 100
        });
        chai_1.assert.equal(Rects_1.Rects.intersect(primaryRect, secondaryRect), true);
        const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, secondaryRect);
        chai_1.assert.equal(adjacency.adjustments.vertical.overlapped, true);
        chai_1.assert.equal(adjacency.adjustments.horizontal.overlapped, true);
        chai_1.assert.equal(adjacency.adjustment !== null, true);
        chai_1.assert.equal(adjacency.adjustment.overlapped, true);
        chai_1.assert.equal(adjacency.adjustment.snapped, "BEFORE");
        const expected = {
            "left": 200,
            "top": 128,
            "right": 400,
            "bottom": 328,
            "width": 200,
            "height": 200
        };
        Assertions_1.assertJSON(adjacency.adjustedRect, expected);
    });
});
const MockRects = {
    DRAG_LEFT_TOWARD_RESTRICTION: {
        primaryRect: {
            "left": 50,
            "top": 0,
            "right": 350,
            "bottom": 500,
        },
        intersectedRect: {
            "left": 0,
            "top": 0,
            "right": 200,
            "bottom": 500,
            "width": 200,
            "height": 500
        },
        restrictionRect: {
            "left": 0,
            "top": 0,
            "right": 800,
            "bottom": 500,
            "width": 800,
            "height": 500
        }
    }
};
//# sourceMappingURL=data:application/json;base64,